include build/default.config

# The following arguments are provided from ./configure
export BUILD
export BUILDNAME
export IP
export PREFIX

export NAME
export FULLNAME

export OUTDIR ?= release
export RPMDIR ?= $$HOME/rpmbuild

export HTTPDMARLA=conf/$(NAME)
export HTTPDETC=$(PREFIX)/etc/httpd/$(HTTPDMARLA)

export MARLASHARE=$(PREFIX)/usr/share/$(NAME)

export SITES_DIR=sites.d

# Default rule
all: build
.PHONY: all

Makefile: Makefile.in configure $(BUILD) build/default.config
	./configure $(BUILDNAME)

build: | $(SITES_DIR)
	for site in `ls $(SITES_DIR)`; do \
		$(MAKE) -C $(SITES_DIR)/$$site $@ || exit 1; \
	done
.PHONY: build

# Be certain that arguments passed to this make
# are also passed to the uninstall's make.
install: uninstall build install-chroot install-httpd $(MARLASHARE) $(SITES_DIR)
	if test x$(PORT) = x; then                    \
		PORT=$(LISTEN_BASE);                      \
		buildtype=local;                          \
	else                                          \
		buildtype=remote;                         \
		PORT=$(PORT);                             \
		SECURE_PORT=$(SECURE_PORT);               \
	fi;                                           \
	for site in `ls $(SITES_DIR)`; do             \
		if [ $$buildtype = local ]; then          \
			SECURE_PORT=$$(($$PORT + 1));         \
			DOMAIN=$(IP);                         \
			LISTEN_PORTS="$$PORT $$SECURE_PORT";  \
		else                                      \
			DOMAIN=`basename $$site`;             \
			LISTEN_PORTS=;                        \
		fi;                                       \
		echo "$$site: $$DOMAIN:$$PORT";           \
		echo "$$site secure: $$DOMAIN:$$SECURE_PORT"; \
		$(MAKE) -C $(SITES_DIR)/$$site            \
			DOMAIN=$$DOMAIN                       \
			PORT=$$PORT                           \
			SECURE_PORT=$$SECURE_PORT             \
			LISTEN_PORTS="$$LISTEN_PORTS"         \
			$@;                                   \
		if [ $$buildtype = local ]; then          \
			let PORT+=2;                          \
		fi;                                       \
	done
.PHONY: install

$(MARLASHARE): $(PREFIX)
	mkdir -p $@

bindir=$(PREFIX)/usr/bin

install-chroot: $(wildcard ./bin/chroot-*) | $(bindir)
	for script in $^; do \
		cp $$script $(bindir)/marla-`basename $$script`; \
	done;

$(bindir):
	mkdir -p $@

install-httpd: httpd/*.conf $(HTTPDETC)/listen.conf install-ssl | $(HTTPDETC)
	cp httpd/*.conf $(HTTPDETC)
	
	find $(HTTPDETC) -name '*.conf' | xargs sed -i \
		-e "s#@HTTPDMARLA@#$(HTTPDMARLA)#g";
	
	mkdir -p $(HTTPDETC)/sites.d
.PHONY: install-httpd

$(HTTPDETC)/listen.conf: $(HTTPDETC)
	echo "# Listen configuration, autogenerated at `date`" >$@-wip
	echo "# DO NOT EDIT THIS FILE!" >>$@-wip
	echo >>$@-wip
	PORT=$(PORT); \
	SECURE_PORT=$(SECURE_PORT); \
	if test x$$PORT = x; then \
		echo "# Using port-based virtual hosting" >>$@-wip; \
	else \
		echo "Listen $(PORT)" >>$@-wip; \
		echo "NameVirtualHost $(IP):$(PORT)" >>$@-wip; \
		echo "Listen $(SECURE_PORT)" >>$@-wip; \
		echo "NameVirtualHost $(IP):$(SECURE_PORT)" >>$@-wip; \
	fi;
	mv $@-wip $@

install-ssl: $(addprefix httpd/ssl/, 127.0.0.1.crt 127.0.0.1.key) | $(HTTPDETC)/ssl $(HTTPDETC)/ssl/README
	cp $^ $(HTTPDETC)/ssl
	chmod 700 $(HTTPDETC)/ssl
	chmod 600 $(HTTPDETC)/ssl/*
.PHONY: install-ssl

$(addprefix httpd/ssl/, 127.0.0.1.crt 127.0.0.1.key):
	$(MAKE) -C httpd/ssl cert

$(HTTPDETC)/ssl/README:
	echo SSL certificates and keys should be placed here. They should be named >$@
	echo according to the domain name that they verify. For instance, foo.com should >>$@
	echo have a key named foo.com.key and a cerificate named foo.com.crt. During >>$@
	echo testing, 127.0.0.1.key and 127.0.0.1.crt will be used. Note that these local >>$@
	echo keys are not real certificates and will cause browser warnings when used. >>$@

$(HTTPDETC) $(HTTPDETC)/ssl: $(PREFIX)
	mkdir -p $@

$(PREFIX):
	mkdir -p $@

tarfile=$(FULLNAME).tar.gz

RPMFLAGS ?= --ba
rpm: spec tar $(RPMDIR)/SOURCES/$(FULLNAME)-all-sites.tar | $(RPMDIR)
	cp -u $(OUTDIR)/$(tarfile) $(RPMDIR)/SOURCES
	cp -u $(OUTDIR)/$(FULLNAME).spec $(RPMDIR)/SPECS
	rpmbuild $(RPMFLAGS) $(RPMDIR)/SPECS/$(FULLNAME).spec
	cd $(OUTDIR); \
	for package in `rpm -q --specfile ./$(FULLNAME).spec`; do \
		arch=`echo $$package | grep -E -o '[^.]+$$'`; \
		filename="$(RPMDIR)/RPMS/$$arch/$$package.rpm"; \
		[ -e `basename $$filename` ] || ln -s $$filename; \
	done
.PHONY: rpm

$(RPMDIR)/SOURCES/$(FULLNAME)-all-sites.tar: | $(RPMDIR)
	touch $@-wip
	for site in `ls $(SITES_DIR)`; do \
		tar -rf $@-wip \
			--transform='s,^.*/,,g' \
			$(SITES_DIR)/$$site/`basename $$site`.tar.gz \
			|| exit 1; \
	done;
	mv $@-wip $@

tar: $(OUTDIR)/$(tarfile) | $(OUTDIR)
	for site in `ls $(SITES_DIR)`; do \
		$(MAKE) -C $(SITES_DIR)/$$site `basename $$site`.tar.gz || exit 1; \
	done
.PHONY: tar

$(OUTDIR)/$(tarfile): bin/chroot-* httpd build/default.config $(BUILD) configure Makefile Makefile.in | $(OUTDIR)
	tar  -cf $@ \
		--exclude-vcs \
		--exclude='README' \
		--exclude-backups \
		--transform='s,^,$(FULLNAME)/,g' \
		$^;

spec: $(OUTDIR)/$(FULLNAME).spec
.PHONY: spec

$(OUTDIR)/$(FULLNAME).spec: | $(SITES_DIR) $(OUTDIR)
	echo -n                                >$@-wip
	echo "%define projectname $(NAME)"    >>$@-wip
	echo "%define fullname $(FULLNAME)"   >>$@-wip
	echo "%define buildname $(BUILDNAME)" >>$@-wip
	echo                                  >>$@-wip
	cat rpm.spec.in >>$@-wip
	for site in `ls $(SITES_DIR)`; do               \
		site_path=$(SITES_DIR)/$$site;              \
		$(MAKE) -C $$site_path rpm.spec || exit 1;  \
		echo                              >>$@-wip; \
		cat $$site_path/rpm.spec          >>$@-wip; \
	done
	mv $@-wip $@
.PHONY: $(OUTDIR)/$(FULLNAME).spec
# I use phony here to ensure the specfile is always regenerated

$(OUTDIR) $(SITES_DIR):
	mkdir -p $@

$(RPMDIR):
	mkdir -p $@
	cd $@ && mkdir -p SOURCES SPECS BUILD RPMS SRPMS

uninstall:
	if echo $(HTTPDETC) | grep -q -e '$(NAME)'; then \
		rm -rf $(HTTPDETC);                        \
	fi;
	for site in `ls $(SITES_DIR)`; do              \
		$(MAKE) -C $(SITES_DIR)/$$site $@;         \
	done
	# Be certain that arguments passed to this make
	# are also passed to the install's make.
.PHONY: uninstall

# We do NOT delete RPMDIR during clean, since we don't own it.
clean: | $(SITES_DIR)
	[ "$(OUTDIR)" != "/" ] && rm -rf $(OUTDIR)
	for site in `ls $(SITES_DIR)`; do \
		$(MAKE) -C $(SITES_DIR)/$$site $@; \
	done
.PHONY: clean

# vim: set noet :
